/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LoansNFTInterface extends ethers.utils.Interface {
  functions: {
    "CFY_VAULT()": FunctionFragment;
    "acceptLoanRequest(uint256)": FunctionFragment;
    "allLoanRequests(uint256)": FunctionFragment;
    "cancelLoanRequest(uint256)": FunctionFragment;
    "createLoanRequest(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "endLoanRequest(uint256)": FunctionFragment;
    "extendLoanRequest(uint256)": FunctionFragment;
    "manager()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "pauseLoans()": FunctionFragment;
    "paused()": FunctionFragment;
    "totalLoanRequests()": FunctionFragment;
    "unPauseLoans()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CFY_VAULT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptLoanRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allLoanRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLoanRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoanRequest",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "endLoanRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extendLoanRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseLoans",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLoanRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unPauseLoans",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "CFY_VAULT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptLoanRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allLoanRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLoanRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLoanRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endLoanRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendLoanRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseLoans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLoanRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unPauseLoans",
    data: BytesLike
  ): Result;

  events: {
    "LoansUpdated()": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LoansUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class LoansNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LoansNFTInterface;

  functions: {
    CFY_VAULT(overrides?: CallOverrides): Promise<[string]>;

    acceptLoanRequest(
      loanID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allLoanRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        loanID: BigNumber;
        lender: string;
        borrower: string;
        smartContractAddressOfNFT: string;
        tokenIdNFT: BigNumber;
        loanAmount: BigNumber;
        interestAmount: BigNumber;
        singlePeriodTime: BigNumber;
        maximumInterestPeriods: BigNumber;
        endLoanTimeStamp: BigNumber;
        status: number;
      }
    >;

    cancelLoanRequest(
      loanID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLoanRequest(
      smartContractAddressOfNFT: string,
      tokenIdNFT: BigNumberish,
      loanAmount: BigNumberish,
      interestAmount: BigNumberish,
      singlePeriodTime: BigNumberish,
      maximumInterestPeriods: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endLoanRequest(
      loanID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendLoanRequest(
      loanID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseLoans(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    totalLoanRequests(overrides?: CallOverrides): Promise<[BigNumber]>;

    unPauseLoans(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CFY_VAULT(overrides?: CallOverrides): Promise<string>;

  acceptLoanRequest(
    loanID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allLoanRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      loanID: BigNumber;
      lender: string;
      borrower: string;
      smartContractAddressOfNFT: string;
      tokenIdNFT: BigNumber;
      loanAmount: BigNumber;
      interestAmount: BigNumber;
      singlePeriodTime: BigNumber;
      maximumInterestPeriods: BigNumber;
      endLoanTimeStamp: BigNumber;
      status: number;
    }
  >;

  cancelLoanRequest(
    loanID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLoanRequest(
    smartContractAddressOfNFT: string,
    tokenIdNFT: BigNumberish,
    loanAmount: BigNumberish,
    interestAmount: BigNumberish,
    singlePeriodTime: BigNumberish,
    maximumInterestPeriods: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endLoanRequest(
    loanID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendLoanRequest(
    loanID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseLoans(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  totalLoanRequests(overrides?: CallOverrides): Promise<BigNumber>;

  unPauseLoans(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CFY_VAULT(overrides?: CallOverrides): Promise<string>;

    acceptLoanRequest(
      loanID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allLoanRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        loanID: BigNumber;
        lender: string;
        borrower: string;
        smartContractAddressOfNFT: string;
        tokenIdNFT: BigNumber;
        loanAmount: BigNumber;
        interestAmount: BigNumber;
        singlePeriodTime: BigNumber;
        maximumInterestPeriods: BigNumber;
        endLoanTimeStamp: BigNumber;
        status: number;
      }
    >;

    cancelLoanRequest(
      loanID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createLoanRequest(
      smartContractAddressOfNFT: string,
      tokenIdNFT: BigNumberish,
      loanAmount: BigNumberish,
      interestAmount: BigNumberish,
      singlePeriodTime: BigNumberish,
      maximumInterestPeriods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endLoanRequest(
      loanID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extendLoanRequest(
      loanID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pauseLoans(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    totalLoanRequests(overrides?: CallOverrides): Promise<BigNumber>;

    unPauseLoans(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    LoansUpdated(): TypedEventFilter<[], {}>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    CFY_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    acceptLoanRequest(
      loanID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allLoanRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelLoanRequest(
      loanID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLoanRequest(
      smartContractAddressOfNFT: string,
      tokenIdNFT: BigNumberish,
      loanAmount: BigNumberish,
      interestAmount: BigNumberish,
      singlePeriodTime: BigNumberish,
      maximumInterestPeriods: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endLoanRequest(
      loanID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendLoanRequest(
      loanID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseLoans(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    totalLoanRequests(overrides?: CallOverrides): Promise<BigNumber>;

    unPauseLoans(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CFY_VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptLoanRequest(
      loanID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allLoanRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelLoanRequest(
      loanID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLoanRequest(
      smartContractAddressOfNFT: string,
      tokenIdNFT: BigNumberish,
      loanAmount: BigNumberish,
      interestAmount: BigNumberish,
      singlePeriodTime: BigNumberish,
      maximumInterestPeriods: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endLoanRequest(
      loanID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendLoanRequest(
      loanID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseLoans(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLoanRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unPauseLoans(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
