{
  "address": "0xD17b2a6148Ca66297A91068Dc1Ef1f6813B5a436",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LoansUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CFY_VAULT",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "acceptLoanRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allLoanRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartContractAddressOfNFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenIdNFT",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "singlePeriodTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumInterestPeriods",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endLoanTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "enum LoansNFT.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "cancelLoanRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartContractAddressOfNFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenIdNFT",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "singlePeriodTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumInterestPeriods",
          "type": "uint256"
        }
      ],
      "name": "createLoanRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "endLoanRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "extendLoanRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseLoans",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLoanRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPauseLoans",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9283bd034bbea68a2683759d786151e7b9fb6b054bdf9ed855dc457d79994765",
  "receipt": {
    "to": null,
    "from": "0xB677D89584895C99c276AB73A50281De2a105A35",
    "contractAddress": "0xD17b2a6148Ca66297A91068Dc1Ef1f6813B5a436",
    "transactionIndex": 0,
    "gasUsed": "2187801",
    "logsBloom": "0x
    "blockHash": "0xb0568d64513d9128952417d2e6353e0c5900aa8453aec99664d54489c3a643ef",
    "transactionHash": "0x9283bd034bbea68a2683759d786151e7b9fb6b054bdf9ed855dc457d79994765",
    "logs": [],
    "blockNumber": 23811795,
    "cumulativeGasUsed": "2187801",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "51a49dc408b9ab415ac5aa9e112104ea",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LoansUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CFY_VAULT\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"acceptLoanRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLoanRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartContractAddressOfNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singlePeriodTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumInterestPeriods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endLoanTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"enum LoansNFT.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"cancelLoanRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartContractAddressOfNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singlePeriodTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumInterestPeriods\",\"type\":\"uint256\"}],\"name\":\"createLoanRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"endLoanRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"extendLoanRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseLoans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoanRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseLoans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoansNFT.sol\":\"LoansNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"contracts/LoansNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract LoansNFT is IERC721Receiver, Pausable {\\n\\n    event LoansUpdated();\\n\\n    using SafeMath for uint;\\n\\n    enum Status { PENDING, ACTIVE, CANCELLED, ENDED, DEFAULTED }\\n\\n    address payable public constant CFY_VAULT = 0x7Cf5c58c071A94972D26404d31901696109700e1;\\n\\n    struct LoanRequest {\\n        uint loanID;\\n        address payable lender;\\n        address payable borrower;\\n        address smartContractAddressOfNFT;\\n        uint tokenIdNFT;\\n        uint loanAmount;\\n        uint interestAmount;\\n        uint singlePeriodTime;\\n        uint maximumInterestPeriods;\\n        uint endLoanTimeStamp;\\n        Status status;\\n    }\\n\\n    address public manager;\\n    uint public totalLoanRequests;\\n    mapping(uint => LoanRequest) public allLoanRequests;\\n\\n    modifier isValidLoanID(uint loanID) {\\n        require(\\n            loanID < totalLoanRequests,\\n            \\\"Loan ID is invalid.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() { // Modifier\\n        require(\\n            msg.sender == manager,\\n            \\\"Only leasing manager can call this.\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() public {\\n        manager = msg.sender;\\n        totalLoanRequests = 0;\\n    }\\n\\n    // Equivalent to 'bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))'\\n    // Or this.onERC721Received.selector\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    function pauseLoans() public onlyManager {\\n        _pause();\\n    }\\n\\n    function unPauseLoans() public onlyManager {\\n        _unpause();\\n    }\\n\\n    function createLoanRequest(address smartContractAddressOfNFT,\\n                                uint tokenIdNFT,\\n                                uint loanAmount,\\n                                uint interestAmount,\\n                                uint singlePeriodTime,\\n                                uint maximumInterestPeriods) public whenNotPaused {\\n        require(singlePeriodTime <= 31 days, \\\"A single period can have a maximum of one month.\\\");\\n        require(interestAmount < 2*loanAmount, \\\"Interest must be lower than 2 * principal of the loan.\\\");\\n        require(maximumInterestPeriods <= 12, \\\"Maximum interest periods are 12.\\\");\\n        require(maximumInterestPeriods > 0, \\\"Maximum interest period cannot be 0.\\\");\\n\\n        IERC721 currentNFT = IERC721(smartContractAddressOfNFT);\\n        require(currentNFT.getApproved(tokenIdNFT) == address(this), \\\"Transfer has to be approved first\\\");\\n\\n        LoanRequest storage loanRequest =  allLoanRequests[totalLoanRequests];\\n        loanRequest.loanID = totalLoanRequests;\\n        loanRequest.lender = address(0x0);\\n        loanRequest.borrower = msg.sender;\\n        loanRequest.smartContractAddressOfNFT = smartContractAddressOfNFT;\\n        loanRequest.tokenIdNFT = tokenIdNFT;\\n        loanRequest.loanAmount = loanAmount;\\n        loanRequest.interestAmount = interestAmount;\\n        loanRequest.singlePeriodTime = singlePeriodTime;\\n        loanRequest.maximumInterestPeriods = maximumInterestPeriods;\\n        loanRequest.status = Status.PENDING;\\n        totalLoanRequests = SafeMath.add(totalLoanRequests, 1);\\n\\n        currentNFT.safeTransferFrom(msg.sender, address(this), tokenIdNFT);\\n        emit LoansUpdated();\\n    }\\n\\n    function acceptLoanRequest(uint loanID) payable public isValidLoanID(loanID) whenNotPaused {\\n        require(allLoanRequests[loanID].status == Status.PENDING, \\\"Status is not PENDING for loan.\\\");\\n        require(allLoanRequests[loanID].borrower != msg.sender, \\\"Invalid operation. You cannot underwrite your own loan.\\\");\\n\\n        // The lender is require to underwrite the total loan amount minus the interest\\n        // For the first period of the loan\\n        uint sumForLoan = allLoanRequests[loanID].loanAmount - allLoanRequests[loanID].interestAmount;\\n        require(msg.value >= sumForLoan, \\\"Not enough Ether sent to function to underwrite loan.\\\");\\n\\n        allLoanRequests[loanID].maximumInterestPeriods = allLoanRequests[loanID].maximumInterestPeriods - 1;\\n\\n        allLoanRequests[loanID].lender = msg.sender;\\n        allLoanRequests[loanID].status = Status.ACTIVE;\\n        allLoanRequests[loanID].endLoanTimeStamp = SafeMath.add(now, allLoanRequests[loanID].singlePeriodTime);\\n\\n        // Send sumForLoan to borrower, minus 2.5% to CFY token holders\\n        // NFT is kept by the loans smart contract\\n\\n        uint cfySHARE = sumForLoan.mul(25).div(1000);\\n        CFY_VAULT.transfer(cfySHARE);\\n        allLoanRequests[loanID].borrower.transfer(sumForLoan - cfySHARE);\\n        emit LoansUpdated();\\n    }\\n\\n    function extendLoanRequest(uint loanID) payable public isValidLoanID(loanID) whenNotPaused {\\n        require(allLoanRequests[loanID].status == Status.ACTIVE, \\\"Status is not ACTIVE for loan\\\");\\n        require(allLoanRequests[loanID].borrower == msg.sender, \\\"Only the borrower can call this function.\\\");\\n        require(allLoanRequests[loanID].maximumInterestPeriods > 0, \\\"The maximum number of extensions to the loan has been reached.\\\");\\n        require(msg.value >= allLoanRequests[loanID].interestAmount, \\\"Not enough Ether sent to the function to extend loan.\\\");\\n\\n\\n        allLoanRequests[loanID].maximumInterestPeriods = allLoanRequests[loanID].maximumInterestPeriods - 1;\\n        allLoanRequests[loanID].endLoanTimeStamp = SafeMath.add(allLoanRequests[loanID].endLoanTimeStamp, allLoanRequests[loanID].singlePeriodTime);\\n\\n        allLoanRequests[loanID].lender.transfer(allLoanRequests[loanID].interestAmount);\\n        emit LoansUpdated();\\n    }\\n\\n    function endLoanRequest(uint loanID) payable public isValidLoanID(loanID) {\\n        require(allLoanRequests[loanID].status == Status.ACTIVE, \\\"Status is not ACTIVE to end loan.\\\");\\n        require((msg.sender == allLoanRequests[loanID].lender  &&\\n                now >= allLoanRequests[loanID].endLoanTimeStamp) || msg.sender == allLoanRequests[loanID].borrower,\\n                \\\"Unable to end loan.\\\");\\n\\n        // Borrower sends principal amount of loan back to lender\\n        // And receives NFT collateral back\\n        if (msg.sender == allLoanRequests[loanID].borrower) {\\n            require(msg.value >= allLoanRequests[loanID].loanAmount, \\\"The principal amount of the loan was not sent.\\\");\\n            allLoanRequests[loanID].status = Status.ENDED;\\n            allLoanRequests[loanID].lender.transfer(allLoanRequests[loanID].loanAmount);\\n        } else {\\n            allLoanRequests[loanID].status = Status.DEFAULTED;\\n        }\\n\\n        // NFT is sent to the function caller (the lender or borrower).\\n        IERC721 currentNFT = IERC721(allLoanRequests[loanID].smartContractAddressOfNFT);\\n        currentNFT.approve(msg.sender, allLoanRequests[loanID].tokenIdNFT);\\n        currentNFT.transferFrom(address(this), msg.sender, allLoanRequests[loanID].tokenIdNFT);\\n        emit LoansUpdated();\\n    }\\n\\n    function cancelLoanRequest(uint loanID) public isValidLoanID(loanID) {\\n        require(allLoanRequests[loanID].status == Status.PENDING, \\\"Status is not PENDING to cancel loan request\\\");\\n        require(msg.sender == allLoanRequests[loanID].borrower);\\n\\n        allLoanRequests[loanID].status = Status.CANCELLED;\\n\\n        IERC721 currentNFT = IERC721(allLoanRequests[loanID].smartContractAddressOfNFT);\\n        currentNFT.approve(msg.sender, allLoanRequests[loanID].tokenIdNFT);\\n        currentNFT.transferFrom(address(this), msg.sender, allLoanRequests[loanID].tokenIdNFT);\\n        emit LoansUpdated();\\n    }\\n}\\n\",\"keccak256\":\"0x6addda8d2fdd3fc5dd7cd16a54cbd17a5f5c6f010e46f8e20903325ad407dbc7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80635c975abb1161007f578063765d949111610059578063765d9491146104b7578063908ef646146104e2578063c16f547e146104f9578063f9e7d3d114610527576100c2565b80635c975abb1461037a578063634609c2146103a75780637331978f14610489576100c2565b80630118a77a146100c7578063012751c9146100f5578063150b7a021461017857806341074eaf146102bd578063481c6a75146102fe5780635a6803671461033f575b600080fd5b6100f3600480360360208110156100dd57600080fd5b810190808035906020019092919050505061053e565b005b34801561010157600080fd5b50610176600480360360c081101561011857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291905050506109bf565b005b34801561018457600080fd5b506102886004803603608081101561019b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561020257600080fd5b82018360208201111561021457600080fd5b8035906020019184600183028401116401000000008311171561023657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610f06565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156102c957600080fd5b506102d2610f1a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030a57600080fd5b50610313610f32565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034b57600080fd5b506103786004803603602081101561036257600080fd5b8101908080359060200190929190505050610f58565b005b34801561038657600080fd5b5061038f6112cf565b60405180821515815260200191505060405180910390f35b3480156103b357600080fd5b506103e0600480360360208110156103ca57600080fd5b81019080803590602001909291905050506112e5565b604051808c81526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187815260200186815260200185815260200184815260200183815260200182600481111561046e57fe5b81526020019b50505050505050505050505060405180910390f35b6104b56004803603602081101561049f57600080fd5b81019080803590602001909291905050506113ac565b005b3480156104c357600080fd5b506104cc6119c5565b6040518082815260200191505060405180910390f35b3480156104ee57600080fd5b506104f76119cb565b005b6105256004803603602081101561050f57600080fd5b8101908080359060200190929190505050611a7b565b005b34801561053357600080fd5b5061053c611f97565b005b8060015481106105b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4c6f616e20494420697320696e76616c69642e0000000000000000000000000081525060200191505060405180910390fd5b6105be6112cf565b15610631576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600481111561063e57fe5b60026000848152602001908152602001600020600a0160009054906101000a900460ff16600481111561066d57fe5b146106e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f537461747573206973206e6f742041435449564520666f72206c6f616e00000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461079a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806123df6029913960400191505060405180910390fd5b6000600260008481526020019081526020016000206008015411610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e8152602001806124e3603e913960400191505060405180910390fd5b6002600083815260200190815260200160002060060154341015610878576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806125216035913960400191505060405180910390fd5b600160026000848152602001908152602001600020600801540360026000848152602001908152602001600020600801819055506108e260026000848152602001908152602001600020600901546002600085815260200190815260200160002060070154612047565b60026000848152602001908152602001600020600901819055506002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60026000858152602001908152602001600020600601549081150290604051600060405180830381858888f1935050505015801561098e573d6000803e3d6000fd5b507f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b376860405160405180910390a15050565b6109c76112cf565b15610a3a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6228de80821115610a96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806125dd6030913960400191505060405180910390fd5b836002028310610af1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061248c6036913960400191505060405180910390fd5b600c811115610b68576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4d6178696d756d20696e74657265737420706572696f6473206172652031322e81525060200191505060405180910390fd5b60008111610bc1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806125b96024913960400191505060405180910390fd5b60008690503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c2e57600080fd5b505afa158015610c42573d6000803e3d6000fd5b505050506040513d6020811015610c5857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614610cd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061260d6021913960400191505060405180910390fd5b60006002600060015481526020019081526020016000209050600154816000018190555060008160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550878160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550868160040181905550858160050181905550848160060181905550838160070181905550828160080181905550600081600a0160006101000a81548160ff02191690836004811115610e1157fe5b0217905550610e236001546001612047565b6001819055508173ffffffffffffffffffffffffffffffffffffffff166342842e0e33308a6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610eb857600080fd5b505af1158015610ecc573d6000803e3d6000fd5b505050507f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b376860405160405180910390a15050505050505050565b600063150b7a0260e01b9050949350505050565b737cf5c58c071a94972d26404d31901696109700e181565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806001548110610fd0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4c6f616e20494420697320696e76616c69642e0000000000000000000000000081525060200191505060405180910390fd5b60006004811115610fdd57fe5b60026000848152602001908152602001600020600a0160009054906101000a900460ff16600481111561100c57fe5b14611062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612429602c913960400191505060405180910390fd5b6002600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d057600080fd5b6002806000848152602001908152602001600020600a0160006101000a81548160ff0219169083600481111561110257fe5b021790555060006002600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b33360026000878152602001908152602001600020600401546040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156111c957600080fd5b505af11580156111dd573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166323b872dd303360026000888152602001908152602001600020600401546040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561128657600080fd5b505af115801561129a573d6000803e3d6000fd5b505050507f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b376860405160405180910390a1505050565b60008060009054906101000a900460ff16905090565b60026020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600401549080600501549080600601549080600701549080600801549080600901549080600a0160009054906101000a900460ff1690508b565b806001548110611424576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4c6f616e20494420697320696e76616c69642e0000000000000000000000000081525060200191505060405180910390fd5b6001600481111561143157fe5b60026000848152602001908152602001600020600a0160009054906101000a900460ff16600481111561146057fe5b146114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806124086021913960400191505060405180910390fd5b6002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561153d575060026000838152602001908152602001600020600901544210155b806115a957506002600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61161b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e61626c6520746f20656e64206c6f616e2e0000000000000000000000000081525060200191505060405180910390fd5b6002600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156117c45760026000838152602001908152602001600020600501543410156116f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061258b602e913960400191505060405180910390fd5b600360026000848152602001908152602001600020600a0160006101000a81548160ff0219169083600481111561172757fe5b02179055506002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60026000858152602001908152602001600020600501549081150290604051600060405180830381858888f193505050501580156117be573d6000803e3d6000fd5b506117fd565b600460026000848152602001908152602001600020600a0160006101000a81548160ff021916908360048111156117f757fe5b02179055505b60006002600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b33360026000878152602001908152602001600020600401546040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156118bf57600080fd5b505af11580156118d3573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166323b872dd303360026000888152602001908152602001600020600401546040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561197c57600080fd5b505af1158015611990573d6000803e3d6000fd5b505050507f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b376860405160405180910390a1505050565b60015481565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a71576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806123bc6023913960400191505060405180910390fd5b611a796120cf565b565b806001548110611af3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4c6f616e20494420697320696e76616c69642e0000000000000000000000000081525060200191505060405180910390fd5b611afb6112cf565b15611b6e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b60006004811115611b7b57fe5b60026000848152602001908152602001600020600a0160009054906101000a900460ff166004811115611baa57fe5b14611c1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f537461747573206973206e6f742050454e44494e4720666f72206c6f616e2e0081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611cd8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260378152602001806124556037913960400191505060405180910390fd5b60006002600084815260200190815260200160002060060154600260008581526020019081526020016000206005015403905080341015611d64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806125566035913960400191505060405180910390fd5b60016002600085815260200190815260200160002060080154036002600085815260200190815260200160002060080181905550336002600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160026000858152602001908152602001600020600a0160006101000a81548160ff02191690836004811115611e2057fe5b0217905550611e45426002600086815260200190815260200160002060070154612047565b60026000858152602001908152602001600020600901819055506000611e896103e8611e7b6019856121ba90919063ffffffff16565b61224090919063ffffffff16565b9050737cf5c58c071a94972d26404d31901696109700e173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611ee5573d6000803e3d6000fd5b506002600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8284039081150290604051600060405180830381858888f19350505050158015611f64573d6000803e3d6000fd5b507f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b376860405160405180910390a150505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461203d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806123bc6023913960400191505060405180910390fd5b6120456122c9565b565b6000808284019050838110156120c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6120d76112cf565b1561214a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861218d6123b3565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000808314156121cd576000905061223a565b60008284029050828482816121de57fe5b0414612235576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806124c26021913960400191505060405180910390fd5b809150505b92915050565b60008082116122b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b8183816122c057fe5b04905092915050565b6122d16112cf565b612343576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6123866123b3565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60003390509056fe4f6e6c79206c656173696e67206d616e616765722063616e2063616c6c20746869732e4f6e6c792074686520626f72726f7765722063616e2063616c6c20746869732066756e6374696f6e2e537461747573206973206e6f742041435449564520746f20656e64206c6f616e2e537461747573206973206e6f742050454e44494e4720746f2063616e63656c206c6f616e2072657175657374496e76616c6964206f7065726174696f6e2e20596f752063616e6e6f7420756e646572777269746520796f7572206f776e206c6f616e2e496e746572657374206d757374206265206c6f776572207468616e2032202a207072696e636970616c206f6620746865206c6f616e2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77546865206d6178696d756d206e756d626572206f6620657874656e73696f6e7320746f20746865206c6f616e20686173206265656e20726561636865642e4e6f7420656e6f7567682045746865722073656e7420746f207468652066756e6374696f6e20746f20657874656e64206c6f616e2e4e6f7420656e6f7567682045746865722073656e7420746f2066756e6374696f6e20746f20756e6465727772697465206c6f616e2e546865207072696e636970616c20616d6f756e74206f6620746865206c6f616e20776173206e6f742073656e742e4d6178696d756d20696e74657265737420706572696f642063616e6e6f7420626520302e412073696e676c6520706572696f642063616e20686176652061206d6178696d756d206f66206f6e65206d6f6e74682e5472616e736665722068617320746f20626520617070726f766564206669727374a264697066735822122086ffd231754e8e3912694e247666ced7947c3a5b4d26eb333866c7bd99d0b0bb64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 541,
        "contract": "contracts/LoansNFT.sol:LoansNFT",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 665,
        "contract": "contracts/LoansNFT.sol:LoansNFT",
        "label": "manager",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 667,
        "contract": "contracts/LoansNFT.sol:LoansNFT",
        "label": "totalLoanRequests",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 671,
        "contract": "contracts/LoansNFT.sol:LoansNFT",
        "label": "allLoanRequests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(LoanRequest)663_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)637": {
        "encoding": "inplace",
        "label": "enum LoansNFT.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(LoanRequest)663_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoansNFT.LoanRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanRequest)663_storage"
      },
      "t_struct(LoanRequest)663_storage": {
        "encoding": "inplace",
        "label": "struct LoansNFT.LoanRequest",
        "members": [
          {
            "astId": 642,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "loanID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 644,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "lender",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 646,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "borrower",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 648,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "smartContractAddressOfNFT",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 650,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "tokenIdNFT",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 652,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "loanAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 654,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "interestAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 656,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "singlePeriodTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 658,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "maximumInterestPeriods",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 660,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "endLoanTimeStamp",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 662,
            "contract": "contracts/LoansNFT.sol:LoansNFT",
            "label": "status",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(Status)637"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}